if(!require("ggplot2")) install.packages("ggplot2")
if(!require("reshape2")) install.packages("reshape2")
if(!require("tcltk")) install.packages("tcltk")
#library("plyr")
library("ggplot2")
library("reshape2")
library("tcltk")
currentDir <- getwd()
options(stringsAsFactors = FALSE)
if(reloadFromSource == TRUE) {
colNamesTFBSTables <- c("EnsemblId","TranscriptionFactorBindingSites")
print("Choose the file that contains the conserved TFBS on one line")
tFTableOneLine <- fread(tk_choose.files(default = "~/Documents/Project/Programming/Transcription Factor Binding/29mammals_unique_tfbs_per_gene_one_line_motifversionsdeleted_unique_DieterStoker_01_07_2017.txt",
caption = "Choose the .txt file that contains the conserved TFBS on one line",
multi = FALSE))
colnames(tFTableOneLine) <- colNamesTFBSTables
print(head(tFTableOneLine))
tFTableMultipleLines <- fread(tk_choose.files(default = "~/Documents/Project/Programming/Transcription Factor Binding/29mammals_unique_tfbs_per_gene_multiple_lines_motifversionsdeleted_unique_DieterStoker_01_07_2017.txt",
caption = "Choose the .txt file that contains the conserved TFBS on multiple lines",
multi = FALSE))
colnames(tFTableMultipleLines) <- colNamesTFBSTables
print(head(tFTableMultipleLines))
MHCGeneTable <- read.csv(tk_choose.files(default = "~/Documents/Project/Programming/DataForAll/PositiveList_2.csv",
caption = "Choose the .csv file that contains the positive MHC gene set",
multi = FALSE),header = TRUE)
names(MHCGeneTable)[7] <- "EnsemblId"
print(head(MHCGeneTable))
#save as .R data files
saveRDS(tFTableOneLine, file = paste(currentDir, "/tFTableOneLineUniqueMotifs.rds", sep=""))
saveRDS(tFTableMultipleLines, file = paste(currentDir, "/tFTableMultipleLinesUniqueMotifs.rds", sep=""))
saveRDS(MHCGeneTable, file = paste(currentDir, "/MHCGeneTable.rds", sep=""))
} else if (reloadFromSource == FALSE) {
tFTableOneLine <- readRDS(file = paste(currentDir, "/tFTableOneLineUniqueMotifs.rds", sep=""))
tFTableMultipleLines <- readRDS(file = paste(currentDir, "/tFTableMultipleLinesUniqueMotifs.rds", sep=""))
MHCGeneTable <- readRDS(file = paste(currentDir, "/MHCGeneTable.rds", sep=""))
}
#______________________________
amountPositiveSetInList <- sum(MHCGeneTable$EnsemblId %in% tFTableMultipleLines$EnsemblId)
relevantTFBSDf <- tFTableMultipleLines[tFTableMultipleLines$EnsemblId %in% MHCGeneTable$EnsemblId,]
print(paste("Amount of positive set genes in 29 mammals data set:", amountPositiveSetInList))
print(head(relevantTFBSDf))
#note: relevantTFBSDf thus contains the TFBS linked to MHC pathway related genes
#Count data TFBS for MHC gene set
countDataNames <-c("TFBS","Counts")
positiveSetTFBSCounts <- plyr::count(relevantTFBSDf$TranscriptionFactorBindingSites)
names(positiveSetTFBSCounts) <- countDataNames
print("The counts of the TFBS present in MHC genes:")
print(head(positiveSetTFBSCounts))
#count the totals for the positive set
totalCountsMHCSet <- sum(positiveSetTFBSCounts$Counts)
#Count data for TFBS in all genes
totalSetTFBSCounts = plyr::count(tFTableMultipleLines$TranscriptionFactorBindingSites)
names(totalSetTFBSCounts) = countDataNames
totalCountsFullSet = sum(totalSetTFBSCounts$Counts)
#calculate the odds that a random gene in the full set has a certain TFBS
genomeOdds <- apply(totalSetTFBSCounts, FUN = function(x) {
as.numeric(x[2])/totalCountsFullSet
}, MARGIN = 1)
names(genomeOdds) <- totalSetTFBSCounts$TFBS
#calculate the odds that a gene in the MHC set has a certain TFBS
MHCOdds <- apply(positiveSetTFBSCounts, FUN = function(x) {
as.numeric(x[2])/totalCountsMHCSet
}, MARGIN = 1)
names(MHCOdds) <- positiveSetTFBSCounts$TFBS
return(list(tFTableOneLine = tFTableOneLine,
tFTableMultipleLines = tFTableMultipleLines,
MHCGeneTable = MHCGeneTable,
MHCGenesInDataset = amountPositiveSetInList,
genomeOdds = genomeOdds,
MHCOdds = MHCOdds,
positiveSetTFBSCounts = positiveSetTFBSCounts,
totalSetTFBSCounts = totalSetTFBSCounts,
TFBSinMHCGenes = relevantTFBSDf
)
)
}
##########################################################
#computerFishersTest
#function takes whole genome count data and positive set count data,
#executes fisher's exact p on all relevant TFSB to find if they are enriched
#in positive set
##########################################################
computeFishersTest = function(wholeGenomeTFBSCountData, positiveSetTFBSCountData, run = FALSE) {
#don't compute again unless explicitly told to. Otherwise, just open the .rds
if(run == FALSE) {
fisherDataFrame <- readRDS(file = paste(getwd(), "/fisherDataFrameUniqueMotifs.rds", sep = ""))
return(fisherDataFrame)
}
else {
#Get only those genes from the whole genome that have TFBS that are also found in the positive MHC set
relevantWholeGenome <- wholeGenomeTFBSCountData[wholeGenomeTFBSCountData$TFBS %in% positiveSetTFBSCountData$TFBS,]
totalCountsWholeGenome <- sum(wholeGenomeTFBSCountData$Counts)
totalCountsMHCGenes <- sum(positiveSetTFBSCountData$Counts)
#listMatrices is for debug purposes, to check whether correct contingency tables are created
listMatrices <- list()
fisherDataFrame <- data.frame(TFBS = character(),
pValue=numeric(),
sampleEstimate=numeric(),
lowerConfidenceInterval=numeric(),
upperConfidenceInterval=numeric())
#cycle over all the rows of
for(bindingSites in 1:nrow(positiveSetTFBSCountData)) {
fisherMatrix <- matrix(c(positiveSetTFBSCountData$Counts[bindingSites],
totalCountsMHCGenes - positiveSetTFBSCountData$Counts[bindingSites],
relevantWholeGenome$Counts[bindingSites],
totalCountsWholeGenome - relevantWholeGenome$Counts[bindingSites]),
nrow = 2,
dimnames = list(TFBS = c(relevantWholeGenome$TFBS[bindingSites], "TotalTFBS"),
Set = c("Positive set", "Whole genome")))
fisherTestResult <- fisher.test(fisherMatrix)
pValue = fisherTestResult["p.value"]
lowerConfInt <- unlist(fisherTestResult["conf.int"])[1]
upperConfInt <- unlist(fisherTestResult["conf.int"])[2]
sampleEst <- fisherTestResult["estimate"]
listMatrices <- append(listMatrices,fisherMatrix)
addVector <- c(as.character(relevantWholeGenome$TFBS[bindingSites]),
pValue,
sampleEst,
lowerConfInt,
upperConfInt)
names(addVector) <- c("TFBS", "pValue", "sampleEstimate",
"lowerConfidenceInterval", "upperConfidenceInterval")
#add to the Df the results of the fisherTest
fisherDataFrame <- rbind(fisherDataFrame, addVector, make.row.names = FALSE)
}
#adjust for multiple testing with Benjamini-Hochberg methodology (utilises FDR)
fisherDataFrame$qValue <- p.adjust(fisherDataFrame$pValue, method="BH")
saveRDS(fisherDataFrame, file = paste(getwd(), "/fisherDataFrameUniqueMotifs.rds", sep = ""))
return(fisherDataFrame)
}
}
##########################################################
#function scoresOverRows
#takes the dataframe with Fisher tests and sample estimates as well as whole genome data (one line).
#returns dataframe with score per TFBS and total score of all genes in the 29 mammals data.
##########################################################
scoresOverRows <- function(wholeGenomeDataOneLine, fisherTests) {
# find TFBS that are significantly overrepresented in positive set genes
#assign them a score. log(sample Estimate/qValue). Log to scale,
#sample estimate to incorporate effect size (i.e. HOW overrepresented are they in MHC genes?)
#qValue to incorporate probability ( TFBS with p>0.05<0.10 are less sure to be correct than those with p< 0.001)
informativeTFBS <- fisherTests[fisherTests$qValue <= 0.10,]
informativeTFBS[order(informativeTFBS$qValue),]
rownames(informativeTFBS) = seq(1:nrow(informativeTFBS))
informativeTFBS$score <- log(informativeTFBS$sampleEstimate / informativeTFBS$qValue)
scoreCompendium <- vector()
dataFrameResults <- data.frame()
#cycle over rows. Could be refined with an apply function
for(rows in 1:nrow(wholeGenomeDataOneLine)) {
#check whether any of the informative TFBS are present in a gene's promoter region
currentRow <- wholeGenomeDataOneLine[rows,]
currentRowTFs <- currentRow[, 2]
characterVectorTFs <- unlist(strsplit(as.character(currentRowTFs), split = "|", fixed = TRUE))
logicalPresence <- informativeTFBS$TFBS %in% characterVectorTFs
currentRowEnsemblId <- currentRow[, "EnsemblId"]
for(bindingSites in 1:length(logicalPresence)) {
#for all informative TFBS, if they are present, add their score, otherwise, add 0
if(logicalPresence[bindingSites] == TRUE) {
valueToAdd <- informativeTFBS$score[bindingSites]
} else if (logicalPresence[bindingSites] == FALSE) {
valueToAdd <- 0
}
scoreCompendium <- append(scoreCompendium,valueToAdd)
names(scoreCompendium)[bindingSites] <-  informativeTFBS$TFBS[bindingSites]
}
#set rownames as the EnsemblId of the gene from the whole genome
dataFrameResults <- rbind(dataFrameResults, scoreCompendium)
rownames(dataFrameResults) <- c(head(rownames(dataFrameResults),-1),currentRow["EnsemblId"])
scoreCompendium <- vector()
#print(nrow(dataFrameResults))
}
colnames(dataFrameResults) <- paste("Score for TFBS", informativeTFBS$TFBS)
dataFrameResults$totalScore <- rowSums(dataFrameResults)
dataFrameResults <- dataFrameResults[order(dataFrameResults$totalScore, decreasing = TRUE),]
print("These are the informative TFBS:")
print(informativeTFBS$TFBS)
return(list(
scoresWholeGenome = dataFrameResults,
informativeTFBS = informativeTFBS))
}
##########################################################
#actual execution of the programme
#loads positive set, checks which TFBS are present there and how often
#does the same for whole genome data (WGD)
#determines which TFBS overrepresented in MHC via fisher tests
#assigns each gene a score log(sample odds ratio estimate from Fisher's exact p/corrected p-value Fisher's exact p) for every TFBS present
#concatenates these individual scores into a total gene score and saves that to a file.
##########################################################
dataStructureTFBS <- loadLibraryAndData(reloadFromSource = FALSE)
fisherTests <- computeFishersTest(dataStructureTFBS$totalSetTFBSCounts,dataStructureTFBS$positiveSetTFBSCounts, run = TRUE)
informativeTFBS <- subset(fisherTests, qValue <= 0.10)
informativeTFBS
runselection = FALSE
if (runselection == TRUE) {
finalScoresWholeGenome <- scoresOverRows(as.data.frame(dataStructureTFBS$tFTableOneLine),as.data.frame(fisherTests))
#Save the final scores of each gene with respect to the amount of MHC-associated TFBS it has, if rerunning
saveRDS(finalScoresWholeGenome, file = paste(getwd(), "/FinalScoreWholeGenomeUniqueMotifs.rds",sep=""))
}
if (runselection == FALSE) {
finalScoresWholeGenome <- readRDS(file = paste(getwd(), "/FinalScoreWholeGenomeUniqueMotifs.rds", sep=""))
}
str(finalScoresWholeGenome)
head(finalScoresWholeGenome$scoresWholeGenome)
outputEnsIdsWithTFBS <- function(run = FALSE) {
if(run == TRUE) {
listIds <- list()
for(relevantTFBS in 1:length(finalScoresWholeGenome$informativeTFBS$TFBS)) {
currentTFBS <- finalScoresWholeGenome$informativeTFBS$TFBS[relevantTFBS]
WGD_relevantgenes <-  dataStructureTFBS$tFTableMultipleLines[dataStructureTFBS$tFTableMultipleLines$TranscriptionFactorBindingSites %in%  currentTFBS,]
#get the EnsemblIds for the current transcription factor from the data
#count the amount that have it per TFBS
Ids <- unique(WGD_relevantgenes$EnsemblId)
listIds[[currentTFBS]] <- Ids
lengthIds <- length(Ids)
names(lengthIds) <- currentTFBS
listIds[["amount"]] <- append(listIds[["amount"]], lengthIds)
}
#now construct a dataframe with this knowledge
neededLength <- max(listIds$amount)
#loop through the transcription factors, get their EnsIDs, and add "" as necessary for dataframe construction
for(relevantTFBS in 1:length(finalScoresWholeGenome$informativeTFBS$TFBS)) {
currentTFBS <- finalScoresWholeGenome$informativeTFBS$TFBS[relevantTFBS]
#repeat "" required amount of times (i.e. the needed length minus the length it has)
#append that to the EnsemblID list
reqReps <-  neededLength - listIds$amount[currentTFBS]
listIds[[currentTFBS]] <- c(listIds[[currentTFBS]], rep("", reqReps))
if (exists("dfWGDEnsmblIdsPerTFBS")) {
dfWGDEnsmblIdsPerTFBS <- data.frame(dfWGDEnsmblIdsPerTFBS,listIds[[currentTFBS]])
} else if(!exists("dfWGDEnsmblIdsPerTFBS")) {
dfWGDEnsmblIdsPerTFBS <- data.frame(listIds[[currentTFBS]])
}
}
colnames(dfWGDEnsmblIdsPerTFBS) <- names(listIds$amount)
#Once that is done, put all the columns into a dataframe, and save that as .csv
write.csv(dfWGDEnsmblIdsPerTFBS, "EnsemblIdsWGDUniqueMotifs.csv")
#return the df for checking in R
return (dfWGDEnsmblIdsPerTFBS)
}
}
outputEnsIdsDataFrame <- outputEnsIdsWithTFBS(run = TRUE)
loadLibraryAndData <- function(reloadFromSource = FALSE) {
#load required libraries
#if(!require("plyr")) install.packages("plyr")
if(!require("ggplot2")) install.packages("ggplot2")
if(!require("reshape2")) install.packages("reshape2")
if(!require("tcltk")) install.packages("tcltk")
#library("plyr")
library("ggplot2")
library("reshape2")
library("tcltk")
currentDir <- getwd()
options(stringsAsFactors = FALSE)
if(reloadFromSource == TRUE) {
colNamesTFBSTables <- c("EnsemblId","TranscriptionFactorBindingSites")
print("Choose the file that contains the conserved TFBS on one line")
tFTableOneLine <- read.table(tk_choose.files(default = "~/Documents/Project/Programming/Transcription Factor Binding/29mammals_unique_tfbs_per_gene_one_line.txt",
caption = "Choose the .txt file that contains the conserved TFBS on one line",
multi = FALSE))
colnames(tFTableOneLine) <- colNamesTFBSTables
print(head(tFTableOneLine))
tFTableMultipleLines <- read.table(tk_choose.files(default = "~/Documents/Project/Programming/Transcription Factor Binding/29mammals_unique_tfbs_per_gene_per_line.txt",
caption = "Choose the .txt file that contains the conserved TFBS on multiple lines",
multi = FALSE))
colnames(tFTableMultipleLines) <- colNamesTFBSTables
print(head(tFTableMultipleLines))
MHCGeneTable <- read.csv(tk_choose.files(default = "~/Documents/Project/Programming/Transcription Factor Binding/PositiveList_2.csv",
caption = "Choose the .csv file that contains the positive MHC gene set",
multi = FALSE),header = TRUE)
names(MHCGeneTable)[7] <- "EnsemblId"
print(head(MHCGeneTable))
#save as .R data files
saveRDS(tFTableOneLine, file = paste(currentDir, "/tFTableOneLine.rds", sep=""))
saveRDS(tFTableMultipleLines, file = paste(currentDir, "/tFTableMultipleLines.rds", sep=""))
saveRDS(MHCGeneTable, file = paste(currentDir, "/MHCGeneTable.rds", sep=""))
} else if (reloadFromSource == FALSE) {
tFTableOneLine <- readRDS(file = paste(currentDir, "/tFTableOneLine.rds", sep=""))
tFTableMultipleLines <- readRDS(file = paste(currentDir, "/tFTableMultipleLines.rds", sep=""))
MHCGeneTable <- readRDS(file = paste(currentDir, "/MHCGeneTable.rds", sep=""))
}
#______________________________
amountPositiveSetInList <- sum(MHCGeneTable$EnsemblId %in% tFTableMultipleLines$EnsemblId)
relevantTFBSDf <- tFTableMultipleLines[tFTableMultipleLines$EnsemblId %in% MHCGeneTable$EnsemblId,]
print(paste("Amount of positive set genes in 29 mammals data set:", amountPositiveSetInList))
print(head(relevantTFBSDf))
#note: relevantTFBSDf thus contains the TFBS linked to MHC pathway related genes
#Count data TFBS for MHC gene set
countDataNames <-c("TFBS","Counts")
positiveSetTFBSCounts <- plyr::count(relevantTFBSDf$TranscriptionFactorBindingSites)
names(positiveSetTFBSCounts) <- countDataNames
print("The counts of the TFBS present in MHC genes:")
print(head(positiveSetTFBSCounts))
#count the totals for the positive set
totalCountsMHCSet <- sum(positiveSetTFBSCounts$Counts)
#Count data for TFBS in all genes
totalSetTFBSCounts = plyr::count(tFTableMultipleLines$TranscriptionFactorBindingSites)
names(totalSetTFBSCounts) = countDataNames
totalCountsFullSet = sum(totalSetTFBSCounts$Counts)
#calculate the odds that a random gene in the full set has a certain TFBS
genomeOdds <- apply(totalSetTFBSCounts, FUN = function(x) {
as.numeric(x[2])/totalCountsFullSet
}, MARGIN = 1)
names(genomeOdds) <- totalSetTFBSCounts$TFBS
#calculate the odds that a gene in the MHC set has a certain TFBS
MHCOdds <- apply(positiveSetTFBSCounts, FUN = function(x) {
as.numeric(x[2])/totalCountsMHCSet
}, MARGIN = 1)
names(MHCOdds) <- positiveSetTFBSCounts$TFBS
return(list(tFTableOneLine = tFTableOneLine,
tFTableMultipleLines = tFTableMultipleLines,
MHCGeneTable = MHCGeneTable,
MHCGenesInDataset = amountPositiveSetInList,
genomeOdds = genomeOdds,
MHCOdds = MHCOdds,
positiveSetTFBSCounts = positiveSetTFBSCounts,
totalSetTFBSCounts = totalSetTFBSCounts,
TFBSinMHCGenes = relevantTFBSDf
)
)
}
##########################################################
#computerFishersTest
#function takes whole genome count data and positive set count data,
#executes fisher's exact p on all relevant TFSB to find if they are enriched
#in positive set
##########################################################
computeFishersTest = function(wholeGenomeTFBSCountData, positiveSetTFBSCountData, run = FALSE) {
#don't compute again unless explicitly told to. Otherwise, just open the .rds
if(run == FALSE) {
fisherDataFrame <- readRDS(file = paste(getwd(), "/fisherDataFrame.rds", sep = ""))
return(fisherDataFrame)
}
else {
#Get only those genes from the whole genome that have TFBS that are also found in the positive MHC set
relevantWholeGenome <- wholeGenomeTFBSCountData[wholeGenomeTFBSCountData$TFBS %in% positiveSetTFBSCountData$TFBS,]
totalCountsWholeGenome <- sum(wholeGenomeTFBSCountData$Counts)
totalCountsMHCGenes <- sum(positiveSetTFBSCountData$Counts)
#listMatrices is for debug purposes, to check whether correct contingency tables are created
listMatrices <- list()
fisherDataFrame <- data.frame(TFBS = character(),
pValue=numeric(),
sampleEstimate=numeric(),
lowerConfidenceInterval=numeric(),
upperConfidenceInterval=numeric())
#cycle over all the rows of
for(bindingSites in 1:nrow(positiveSetTFBSCountData)) {
fisherMatrix <- matrix(c(positiveSetTFBSCountData$Counts[bindingSites],
totalCountsMHCGenes - positiveSetTFBSCountData$Counts[bindingSites],
relevantWholeGenome$Counts[bindingSites],
totalCountsWholeGenome - relevantWholeGenome$Counts[bindingSites]),
nrow = 2,
dimnames = list(TFBS = c(relevantWholeGenome$TFBS[bindingSites], "TotalTFBS"),
Set = c("Positive set", "Whole genome")))
fisherTestResult <- fisher.test(fisherMatrix)
pValue = fisherTestResult["p.value"]
lowerConfInt <- unlist(fisherTestResult["conf.int"])[1]
upperConfInt <- unlist(fisherTestResult["conf.int"])[2]
sampleEst <- fisherTestResult["estimate"]
listMatrices <- append(listMatrices,fisherMatrix)
addVector <- c(as.character(relevantWholeGenome$TFBS[bindingSites]),
pValue,
sampleEst,
lowerConfInt,
upperConfInt)
names(addVector) <- c("TFBS", "pValue", "sampleEstimate",
"lowerConfidenceInterval", "upperConfidenceInterval")
#add to the Df the results of the fisherTest
fisherDataFrame <- rbind(fisherDataFrame, addVector, make.row.names = FALSE)
}
#adjust for multiple testing with Benjamini-Hochberg methodology (utilises FDR)
fisherDataFrame$qValue <- p.adjust(fisherDataFrame$pValue, method="BH")
saveRDS(fisherDataFrame, file = paste(getwd(), "/fisherDataFrame.rds", sep = ""))
return(fisherDataFrame)
}
}
##########################################################
#function scoresOverRows
#takes the dataframe with Fisher tests and sample estimates as well as whole genome data (one line).
#returns dataframe with score per TFBS and total score of all genes in the 29 mammals data.
##########################################################
scoresOverRows <- function(wholeGenomeDataOneLine, fisherTests) {
# find TFBS that are significantly overrepresented in positive set genes
#assign them a score. log(sample Estimate/qValue). Log to scale,
#sample estimate to incorporate effect size (i.e. HOW overrepresented are they in MHC genes?)
#qValue to incorporate probability ( TFBS with p>0.05<0.10 are less sure to be correct than those with p< 0.001)
informativeTFBS <- fisherTests[fisherTests$qValue <= 0.10,]
informativeTFBS[order(informativeTFBS$qValue),]
rownames(informativeTFBS) = seq(1:nrow(informativeTFBS))
informativeTFBS$score <- log(informativeTFBS$sampleEstimate / informativeTFBS$qValue)
scoreCompendium <- vector()
dataFrameResults <- data.frame()
#cycle over rows. Could be refined with an apply function
for(rows in 1:nrow(wholeGenomeDataOneLine)) {
#check whether any of the informative TFBS are present in a gene's promoter region
currentRow <- wholeGenomeDataOneLine[rows,]
currentRowTFs <- currentRow[2]
characterVectorTFs <- unlist(strsplit(as.character(currentRowTFs), split = "|", fixed = TRUE))
logicalPresence <- informativeTFBS$TFBS %in% characterVectorTFs
currentRowEnsemblId <- currentRow["EnsemblId"]
for(bindingSites in 1:length(logicalPresence)) {
#for all informative TFBS, if they are present, add their score, otherwise, add 0
if(logicalPresence[bindingSites] == TRUE) {
valueToAdd <- informativeTFBS$score[bindingSites]
} else if (logicalPresence[bindingSites] == FALSE) {
valueToAdd <- 0
}
scoreCompendium <- append(scoreCompendium,valueToAdd)
names(scoreCompendium)[bindingSites] <-  informativeTFBS$TFBS[bindingSites]
}
#set rownames as the EnsemblId of the gene from the whole genome
dataFrameResults <- rbind(dataFrameResults, scoreCompendium)
rownames(dataFrameResults) <- c(head(rownames(dataFrameResults),-1),currentRow["EnsemblId"])
scoreCompendium <- vector()
#print(nrow(dataFrameResults))
}
colnames(dataFrameResults) <- paste("Score for TFBS", informativeTFBS$TFBS)
dataFrameResults$totalScore <- rowSums(dataFrameResults)
dataFrameResults <- dataFrameResults[order(dataFrameResults$totalScore, decreasing = TRUE),]
print("These are the informative TFBS:")
print(informativeTFBS$TFBS)
return(list(
scoresWholeGenome = dataFrameResults,
informativeTFBS = informativeTFBS))
}
##########################################################
#actual execution of the programme
#loads positive set, checks which TFBS are present there and how often
#does the same for whole genome data (WGD)
#determines which TFBS overrepresented in MHC via fisher tests
#assigns each gene a score log(sample odds ratio estimate from Fisher's exact p/corrected p-value Fisher's exact p) for every TFBS present
#concatenates these individual scores into a total gene score and saves that to a file.
##########################################################
dataStructureTFBS <- loadLibraryAndData(reloadFromSource = FALSE)
fisherTests <- computeFishersTest(dataStructureTFBS$totalSetTFBSCounts,dataStructureTFBS$positiveSetTFBSCounts, run = TRUE)
informativeTFBS <- subset(fisherTests, qValue <= 0.10)
informativeTFBS
runselection = FALSE
if (runselection == TRUE) {
finalScoresWholeGenome <- scoresOverRows(dataStructureTFBS$tFTableOneLine,fisherTests)
#Save the final scores of each gene with respect to the amount of MHC-associated TFBS it has, if rerunning
saveRDS(finalScoresWholeGenome, file = paste(getwd(), "/FinalScoreWholeGenome.rds",sep=""))
}
if (runselection == FALSE) {
finalScoresWholeGenome <- readRDS(file = paste(getwd(), "/FinalScoreWholeGenome.rds", sep=""))
}
str(finalScoresWholeGenome)
head(finalScoresWholeGenome$scoresWholeGenome)
outputEnsIdsWithTFBS <- function(run = FALSE) {
if(run == TRUE) {
listIds <- list()
for(relevantTFBS in 1:length(finalScoresWholeGenome$informativeTFBS$TFBS)) {
currentTFBS <- finalScoresWholeGenome$informativeTFBS$TFBS[relevantTFBS]
WGD_relevantgenes <-  dataStructureTFBS$tFTableMultipleLines[dataStructureTFBS$tFTableMultipleLines$TranscriptionFactorBindingSites %in%  currentTFBS,]
#get the EnsemblIds for the current transcription factor from the data
#count the amount that have it per TFBS
Ids <- unique(WGD_relevantgenes$EnsemblId)
listIds[[currentTFBS]] <- Ids
lengthIds <- length(Ids)
names(lengthIds) <- currentTFBS
listIds[["amount"]] <- append(listIds[["amount"]], lengthIds)
}
#now construct a dataframe with this knowledge
neededLength <- max(listIds$amount)
#loop through the transcription factors, get their EnsIDs, and add "" as necessary for dataframe construction
for(relevantTFBS in 1:length(finalScoresWholeGenome$informativeTFBS$TFBS)) {
currentTFBS <- finalScoresWholeGenome$informativeTFBS$TFBS[relevantTFBS]
#repeat "" required amount of times (i.e. the needed length minus the length it has)
#append that to the EnsemblID list
reqReps <-  neededLength - listIds$amount[currentTFBS]
listIds[[currentTFBS]] <- c(listIds[[currentTFBS]], rep("", reqReps))
if (exists("dfWGDEnsmblIdsPerTFBS")) {
dfWGDEnsmblIdsPerTFBS <- data.frame(dfWGDEnsmblIdsPerTFBS,listIds[[currentTFBS]])
} else if(!exists("dfWGDEnsmblIdsPerTFBS")) {
dfWGDEnsmblIdsPerTFBS <- data.frame(listIds[[currentTFBS]])
}
}
colnames(dfWGDEnsmblIdsPerTFBS) <- names(listIds$amount)
#Once that is done, put all the columns into a dataframe, and save that as .csv
write.csv(dfWGDEnsmblIdsPerTFBS, "EnsemblIdsWGD.csv")
#return the df for checking in R
return (dfWGDEnsmblIdsPerTFBS)
}
}
outputEnsIdsDataFrame <- outputEnsIdsWithTFBS(run = TRUE)
EnsemblIdsOriginal29MammalsAnalysis <- fread("~/Documents/Project/Programming/Transcription Factor Binding/EnsemblIdsWGD.csv")
EnsemblIdsOriginalNonUniqueMotifsGeneralised <- fread("~/Documents/Project/Programming/Transcription Factor Binding/EnsemblIdsWGDNonUniqueMotifs.csv")
EnsemblIdsOriginalUniqueMotifsGeneralised <- fread("~/Documents/Project/Programming/Transcription Factor Binding/EnsemblIdsWGDUniqueMotifs.csv")
head(EnsemblIdsOriginal29MammalsAnalysis)
head(EnsemblIdsOriginalUniqueMotifsGeneralised)
head(EnsemblIdsOriginalNonUniqueMotifsGeneralised)
tail(EnsemblIdsOriginal29MammalsAnalysis)
tail(EnsemblIdsOriginalUniqueMotifsGeneralised)
tail(EnsemblIdsOriginalNonUniqueMotifsGeneralised)
Nrf2NonUnique <- EnsemblIdsOriginalNonUniqueMotifsGeneralised$`Nrf-2`[EnsemblIdsOriginalNonUniqueMotifsGeneralised$`Nrf-2` != ""]
Nrf2Unique    <- EnsemblIdsOriginalUniqueMotifsGeneralised$`Nrf-2`[EnsemblIdsOriginalUniqueMotifsGeneralised$`Nrf-2` != ""]
Nrf2_2Original29Mammals <- EnsemblIdsOriginal29MammalsAnalysis$`Nrf-2_2`[EnsemblIdsOriginal29MammalsAnalysis$`Nrf-2_2` != ""]
Nrf2_3Original29Mammals <- EnsemblIdsOriginal29MammalsAnalysis$`Nrf-2_3`[EnsemblIdsOriginal29MammalsAnalysis$`Nrf-2_3` != ""]
length(Nrf2NonUnique)
length(Nrf2Unique)
length(Nrf2_2Original29Mammals) + length(Nrf2_3Original29Mammals)
positiveSet <- fread("~/Documents/Project//Programming/DataForAll/PositiveList_2.csv")
positiveSet
EnsemblIdsPositiveSet <- positiveSet$Ensembl_accession
EnsemblIdsPositiveSet[EnsemblIdsPositiveSet %in% Nrf2_2Original29Mammals]
MHCNrf-2_2 <- EnsemblIdsPositiveSet[EnsemblIdsPositiveSet %in% Nrf2_2Original29Mammals]
MHCNrf2-2 <- EnsemblIdsPositiveSet[EnsemblIdsPositiveSet %in% Nrf2_2Original29Mammals]
MHCNrf22 <- EnsemblIdsPositiveSet[EnsemblIdsPositiveSet %in% Nrf2_2Original29Mammals]
positiveSet[MHCNrf22]
positiveSet[MHCNrf22,]
MHCNrf22
positiveSet[positiveSet$Ensembl_accession %in% MHCNrf22,]
MHCNrf23 <- EnsemblIdsPositiveSet[EnsemblIdsPositiveSet %in% Nrf2_3Original29Mammals]
positiveSet[positiveSet$Ensembl_accession %in% MHCNrf23,]
