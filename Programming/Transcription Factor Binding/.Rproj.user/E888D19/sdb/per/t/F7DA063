{
    "collab_server" : "",
    "contents" : "##Dieter Stoker\n##started 28-02-2017\n##Transcription factor binding\n#Goal: checks genes conserved across 29 mammals for conserved TFBSs that are significantly overrepresented\n#in the MHC genes (tested with Fisher's exact p with Benjamini-Hochberg correction for multiple testing)\n#Assigns a score (sample odds ratio estimate from Fisher's exact p/corrected p-value Fisher's exact p)\n#for each informative TFBS. Cumulative scores are calculated for each of the conserved genes.\n\n\n##Install required libraries and load the data\n\nloadLibraryAndData <- function(reloadFromSource = FALSE) {\n  \n  if(!require(\"plyr\")) install.packages(\"plyr\")\n  if(!require(\"ggplot2\")) \n  \n  \n}\n\ninstall.packages(\"ggplot2\")\ninstall.packages(\"reshape2\")\n\nlibrary(\"plyr\")\nlibrary(\"ggplot2\")\nlibrary(\"reshape2\")\n\noptions(stringsAsFactors = FALSE)\n?save\n##load Data\n\ntranscriptionFactorTableOneLine = read.table(file = \"~/Documents/Project/Data/Data/transcription_fact_binding_sites/29mammals_unique_tfbs_per_gene_one_line.txt\")\nhead(transcriptionFactorTableOneLine)\ncolnames(transcriptionFactorTableOneLine) = c(\"EnsemblId\",\"transcriptionFactorBindingSites\")\n\ntranscriptionFactorTableMultipleLines = read.table(file = \"~/Documents/Project/Data/Data/transcription_fact_binding_sites/29mammals_unique_tfbs_per_gene_per_line.txt\")\nhead(transcriptionFactorTableMultipleLines)\ncolnames(transcriptionFactorTableMultipleLines) = c(\"EnsemblId\",\"transcriptionFactorBindingSites\")\ntail(transcriptionFactorTableMultipleLines)\n\npositiveMHCGenes = read.csv(file=\"~/Documents/Project/MHCGenes/Lists/PositiveList_2.csv\", header = TRUE)\nhead(positiveMHCGenes)\nnames(positiveMHCGenes)[7] = \"EnsemblId\"\n\n#select relevant MHC genes from large dataset ##NOTE: not all are present in this dataset\n\nrelevantGenes <- transcriptionFactorTableMultipleLines[transcriptionFactorTableMultipleLines$EnsemblId %in% positiveMHCGenes$EnsemblId,]\nhead(relevantGenes)\n\n#get the TFBS in count values for MHC Genes\npositiveSetPresenceAmountTFBSDf = count(relevantGenes$transcriptionFactorBindingSites)\nnames(positiveSetPresenceAmountTFBSDf) = c(\"TFBS\",\"Counts\")\npositiveSetPresenceAmountTFBSDf[,1] <- as.character(positiveSetPresenceAmountTFBSDf[,1])\n\n#get the TFBS in count values for all genes\ntotalSetPresenceAmountTFBSDf = count(transcriptionFactorTableMultipleLines$transcriptionFactorBindingSites)\nnames(totalSetPresenceAmountTFBSDf) = c(\"TFBS\",\"Counts\")\nhead(totalSetPresenceAmountTFBSDf)\ntotalCountsFullSet = sum(totalSetPresenceAmountTFBSDf$Counts)\ntotalSetPresenceAmountTFBSDf[,1] = as.character(totalSetPresenceAmountTFBSDf[,1])\n\n#calculate per transcription factor the genome odds that a random gene has that TFBS\n\ngenomeOdds <- apply(totalSetPresenceAmountTFBSDf, FUN = function(x) {\n  as.numeric(x[2])/totalCountsFullSet\n  }, MARGIN = 1)\nnames(genomeOdds) <- totalSetPresenceAmountTFBSDf$TFBS\n\n#calculate per transcription factor the MHC odds that a gene has that TFBS\ntotalCountsMHCSet <- sum(positiveSetPresenceAmountTFBSDf$Counts)\nMHCOdds <- apply(positiveSetPresenceAmountTFBSDf, FUN = function(x) {\n  as.numeric(x[2])/totalCountsMHCSet\n}, MARGIN = 1)\nnames(MHCOdds) <- positiveSetPresenceAmountTFBSDf$TFBS\n\n\n##analyse with Fisher's exact p.\n\n#extract relevant TFBS from whole genome\nrelevantTotalSetTFBS <- totalSetPresenceAmountTFBSDf[totalSetPresenceAmountTFBSDf$TFBS %in% positiveSetPresenceAmountTFBSDf$TFBS,]\nstr(relevantTotalSetTFBS)\nrownames(relevantTotalSetTFBS) <- seq(1:nrow(relevantTotalSetTFBS))\n\n#a = counts appeareance specific TFBS in whole genome\n#b = total TFBS in whole genome\n#c= counts, appearance specific TFBS in MHC set\n#d = counts, total TFBS in MHC set\n#one-tailed, either it is larger in MHC or it is equal, you do not expect it to be...less, right?\nfishermatrixTFBS1 = matrix(c(positiveSetPresenceAmountTFBSDf$Counts[1], totalCountsMHCSet-positiveSetPresenceAmountTFBSDf$Counts[1], relevantTotalSetTFBS$Counts[1], totalCountsFullSet-relevantTotalSetTFBS$Counts[1]), nrow = 2)\nfisher.test(fishermatrixTFBS1)\n?fisher.test\n#do the above in a function, for all relevant TFBS\n\ncomputeFisherstest = function(wholeGenomeTFBSCountData, positiveSetTFBSCountData) {\n  \n  relevantWholeGenome <- wholeGenomeTFBSCountData[wholeGenomeTFBSCountData$TFBS %in% positiveSetTFBSCountData$TFBS,] \n  totalCountsWholeGenome <- sum(wholeGenomeTFBSCountData$Counts)\n  totalCountsMHCGenes <- sum(positiveSetTFBSCountData$Counts)\n  \n  listMatrices <- list()\n  fisherDataFrame <- data.frame(TFBS = character(),\n                                pValue=numeric(),\n                                sampleEstimate=numeric(),\n                                lowerConfidenceInterval=numeric(),\n                                upperConfidenceInterval=numeric())\n  \n  for(bindingSites in 1:nrow(positiveSetTFBSCountData)) {\n    \n    fisherMatrix <- matrix(c(positiveSetTFBSCountData$Counts[bindingSites],\n                             totalCountsMHCGenes - positiveSetTFBSCountData$Counts[bindingSites],\n                             relevantWholeGenome$Counts[bindingSites],\n                             totalCountsWholeGenome - relevantWholeGenome$Counts[bindingSites]),\n                           nrow = 2,\n                           dimnames = list(TFBS = c(relevantWholeGenome$TFBS[bindingSites], \"TotalTFBS\"),\n                                           Set = c(\"Positive set\", \"Whole genome\")))\n    fisherTestResult <- fisher.test(fisherMatrix)\n    pValue = fisherTestResult[\"p.value\"]\n    lowerConfInt <- unlist(fisherTestResult[\"conf.int\"])[1]\n    upperConfInt <- unlist(fisherTestResult[\"conf.int\"])[2]\n    sampleEst <- fisherTestResult[\"estimate\"]\n    \n    listMatrices <- append(listMatrices,fisherMatrix)\n    addVector <- c(as.character(relevantWholeGenome$TFBS[bindingSites]),\n                   pValue,\n                   sampleEst,\n                   lowerConfInt,\n                   upperConfInt)\n    names(addVector) <- c(\"TFBS\", \"pValue\", \"sampleEstimate\",\n                          \"lowerConfidenceInterval\", \"upperConfidenceInterval\")\n    fisherDataFrame <- rbind(fisherDataFrame, addVector, make.row.names = FALSE)\n    \n  }\n  \n  fisherDataFrame$qValue <- p.adjust(fisherDataFrame$pValue, method=\"BH\")\n  return(fisherDataFrame)\n  \n  \n  \n}\n\nfisherTests <- computeFisherstest(totalSetPresenceAmountTFBSDf,positiveSetPresenceAmountTFBSDf)\n\n\n\ninformativeTranscriptionFactors <- fisherTests[fisherTests$qValue < 0.10,]\ninformativeTranscriptionFactors[order(informativeTranscriptionFactors$qValue),]\nrownames(informativeTranscriptionFactors) = seq(1:nrow(informativeTranscriptionFactors))\ninformativeTranscriptionFactors$score <- log(informativeTranscriptionFactors$sampleEstimate / informativeTranscriptionFactors$qValue)\n\n\n##Dus: nu heb ik TFBS die significant enriched zijn in MHC-genen. Check nu in het hele genoom\n##welke genen deze TFBS ook hebben. Maak een score:\n#elke TFBS die ze hebben voegt toe, gewogen aan de sample estimate * qValue\n\n#test subset whole Genome\ntestSubsetWG <- transcriptionFactorTableOneLine[1:50,]\nhead(testSubsetWG)\n?subset\nncol(testSubsetWG)\n\n\npmatch(c(\"\", \"ab\", \"ab\"), c(\"abc\", \"ab\"), dup = FALSE)\npmatch(c(\"\", \"ab\", \"ab\"), c(\"abc\", \"ab\"), dup = TRUE)\npmatch(\"STAT_9\", \"MFX | BRK | STAT_9\")\n\ntestSubsetWG[1,][2] %in% \"STAT_9\"\nflerp <- unlist(strsplit(as.character(testSubsetWG[1,][2]), split = \"|\", fixed = TRUE))\n\"STAT_9\" %in% flerp\nc(\"STAT_9\",\"HORPIE\") %in% flerp\nc(\"STAT_9\",\"HORPIE\",\"Pitx3\") %in% flerp\n?strsplit\n\nbraam <- scoresOverRows(testSubsetWG, informativeTranscriptionFactors)\nhead(braam)\ntail(braam)\nbraam[200:300,]\n\n\n\n\n\n\n\n\nhead(transcriptionFactorTableOneLine)\n  \n  \n  scoresOverRows <- function(wholeGenomeDataOneLine, informativeTFs) {\n    \n \n    scoreCompendium <- vector()\n    dataFrameResults <- data.frame()\n    for(rows in 1:nrow(wholeGenomeDataOneLine)) {\n      \n      currentRow <- wholeGenomeDataOneLine[rows,]\n      currentRowTFs <- currentRow[2]\n      characterVectorTFs <- unlist(strsplit(as.character(currentRowTFs), split = \"|\", fixed = TRUE))\n      logicalPresence <- informativeTFs$TFBS %in% characterVectorTFs\n      currentRowEnsemblId <- currentRow[\"EnsemblId\"]\n      \n      for(bindingSites in 1:length(logicalPresence)) {\n        \n        if(logicalPresence[bindingSites] == TRUE) {\n          \n          valueToAdd <- informativeTFs$score[bindingSites]\n          \n          \n        } else if (logicalPresence[bindingSites] == FALSE) {\n          \n          valueToAdd <- 0\n          \n        }\n        \n        scoreCompendium <- append(scoreCompendium,valueToAdd)\n        names(scoreCompendium)[bindingSites] <-  informativeTFs$TFBS[bindingSites]\n        \n      }\n      dataFrameResults <- rbind(dataFrameResults, scoreCompendium)\n      rownames(dataFrameResults) <- c(head(rownames(dataFrameResults),-1),currentRow[\"EnsemblId\"])\n      scoreCompendium <- vector()\n      #print(nrow(dataFrameResults))\n      \n    }\n    colnames(dataFrameResults) <- paste(\"Score for TFBS\", informativeTFs$TFBS)\n    dataFrameResults$totalScore <- rowSums(dataFrameResults)\n    return(dataFrameResults)\n  }\n  \n#testOutput <- scoresOverRows(testSubsetWG, informativeTranscriptionFactors)  \n#head(testOutput)  \n#tail(testOutput)\n#testOutput[order(testOutput$totalScore),]\n \n  \nallGenesScoredForTFBSPresence <-   scoresOverRows(transcriptionFactorTableOneLine,informativeTranscriptionFactors)\npipo <- allGenesScoredForTFBSPresence[order(allGenesScoredForTFBSPresence$totalScore, decreasing = TRUE),]\nhead(pipo)  \ntail(pipo)\n?order   \nhead(scoresOverRows(transcriptionFactorTableOneLine,informativeTranscriptionFactors))\nsum(pipo$totalScore>0)\n\npizza = scoresOverRows(transcriptionFactorTableOneLine,informativeTranscriptionFactors)\n  \n  ?sapply\ngenerateTFBSScores(transcriptionFactorTableOneLine,informativeTranscriptionFactors)\n\n\n\n\n\nscoresOverRows <- function() {\n  \n  logicalPresence <- informativeTranscriptionFactors$TFBS %in% x[2]\n  \n  scoreCompendium <- vector()\n  \n  for(bindingSites in 1:length(logicalPresence)) {\n    \n    if(logicalPresence[bindingSites] == TRUE) {\n      \n      valueToAdd <- informativeTranscriptionFactors$sampleEstimate[bindingSites] * informativeTranscriptionFactors$qValue[bindingSites]\n      \n      \n    } else if (logicalPresence[bindingSites] == FALSE) {\n      \n      valueToAdd <- 0\n      \n    }\n    \n    scoreCompendium <- append(scoreCompendium,valueToAdd)\n    names(scoreCompendium)[bindingSites] <-  informativeTranscriptionFactors$TFBS[bindingSites]\n    \n  }\n  \n}\n\napply(transcriptionFactorTableOneLine,MARGIN=1,FUN=scoresOverRows)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeaTasting <-\n  matrix(c(3, 1, 1, 3),\n         nrow = 2,\n         dimnames = list(Guess = c(\"Milk\", \"Tea\"),\n                         Truth = c(\"Milk\", \"Tea\")))\n\n\n\n\n\n\n\n\nggplot(presenceAmountTFBSDf, aes(y=Counts, x=TFBS)) + geom_bar(stat=\"identity\") +\n  scale_x_discrete(breaks = presenceAmountTFBSDf$TFBS[presenceAmountTFBSDf$Counts>5], labels = presenceAmountTFBSDf$TFBS[presenceAmountTFBSDf$Counts>5]) +\n  theme_bw() + theme(axis.text.x=element_text(angle=90, hjust=1, vjust = 1))\n\n#random genes from large dataset\nrandomGenes <- transcriptionFactorTableOneLine[runif() %in% positiveMHCGenes$EnsemblId,]\n\nrunif(nrow(positiveMHCGenes),1,nrow(transcriptionFactorTableMultipleLines))\n",
    "created" : 1488468833150.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2718724017",
    "id" : "F7DA063",
    "lastKnownWriteTime" : 1488461052,
    "last_content_update" : 1488461052,
    "path" : "~/Documents/Project/Programming/Transcription Factor Binding/Initial_script(old).R",
    "project_path" : "Initial_script(old).R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}