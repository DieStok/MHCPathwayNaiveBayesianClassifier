{
    "collab_server" : "",
    "contents" : "##Dieter Stoker\n##started 28-02-2017\n##Transcription factor binding\n#Goal: checks genes conserved across 29 mammals for conserved TFBSs that are significantly overrepresented\n#in the MHC genes (tested with Fisher's exact p with Benjamini-Hochberg correction for multiple testing)\n#Assigns a score (sample odds ratio estimate from Fisher's exact test/corrected p-value Fisher's exact test)\n#for each informative TFBS. Cumulative scores are calculated for each of the conserved genes.\n##'finished' 02-03-2017\n## last edited: 26-04-2017\n\n##########################################################\n#Initial options\n##########################################################\n\noptions(stringsAsFactors = FALSE)\n\n##########################################################\n#Function to load in the data and required libraries\n#reloadFromSource = whether source files like positive list etc. should be selected manually\n##########################################################\n\nloadLibraryAndData <- function(reloadFromSource = FALSE) {\n  \n  #load required libraries\n  if(!require(\"plyr\")) install.packages(\"plyr\")\n  if(!require(\"ggplot2\")) install.packages(\"ggplot2\")\n  if(!require(\"reshape2\")) install.packages(\"reshape2\")\n  if(!require(\"tcltk\")) install.packages(\"tcltk\")\n  \n  library(\"plyr\")\n  library(\"ggplot2\")\n  library(\"reshape2\")\n  library(\"tcltk\")\n  \n  currentDir <- getwd()\n  \n  options(stringsAsFactors = FALSE)\n  \n  if(reloadFromSource == TRUE) {\n  \n  colNamesTFBSTables <- c(\"EnsemblId\",\"TranscriptionFactorBindingSites\")\n  \n  \n  print(\"Choose the file that contains the conserved TFBS on one line\")\n  tFTableOneLine <- read.table(tk_choose.files(default = \"~/Documents/Project/Programming/Transcription Factor Binding/29mammals_unique_tfbs_per_gene_one_line.txt\",\n                                               caption = \"Choose the .txt file that contains the conserved TFBS on one line\",\n                                               multi = FALSE))\n  colnames(tFTableOneLine) <- colNamesTFBSTables\n  print(head(tFTableOneLine))\n  \n  \n  tFTableMultipleLines <- read.table(tk_choose.files(default = \"~/Documents/Project/Programming/Transcription Factor Binding/29mammals_unique_tfbs_per_gene_per_line.txt\",\n                                                     caption = \"Choose the .txt file that contains the conserved TFBS on multiple lines\",\n                                                     multi = FALSE))\n  colnames(tFTableMultipleLines) <- colNamesTFBSTables\n  print(head(tFTableMultipleLines))\n  \n  MHCGeneTable <- read.csv(tk_choose.files(default = \"~/Documents/Project/Programming/Transcription Factor Binding/PositiveList_2.csv\",\n                                           caption = \"Choose the .csv file that contains the positive MHC gene set\",\n                                           multi = FALSE),header = TRUE)\n  \n  names(MHCGeneTable)[7] <- \"EnsemblId\"\n  \n  \n  #save as .R data files\n  \n  saveRDS(tFTableOneLine, file = paste(currentDir, \"/tFTableOneLine.rds\",sep=\"\"))\n  saveRDS(tFTableMultipleLines, file = paste(currentDir, \"/tFTableMultipleLines.rds\",sep=\"\"))\n  saveRDS(MHCGeneTable, file = paste(currentDir, \"/MHCGeneTable.rds\",sep=\"\"))\n  \n  } else if (reloadFromSource == FALSE) {\n    \n    tFTableOneLine <- readRDS(file = paste(currentDir, \"/tFTableOneLine.rds\", sep=\"\"))\n    tFTableMultipleLines <- readRDS(file = paste(currentDir, \"/tFTableMultipleLines.rds\", sep=\"\"))\n    MHCGeneTable <- readRDS(file = paste(currentDir, \"/MHCGeneTable.rds\", sep=\"\"))\n    \n  }\n  \n  #______________________________\n  \n  amountPositiveSetInList <- sum(MHCGeneTable$EnsemblId %in% tFTableMultipleLines$EnsemblId)\n  relevantTFBSDf <- tFTableMultipleLines[tFTableMultipleLines$EnsemblId %in% MHCGeneTable$EnsemblId,]\n  print(paste(\"Amount of positive set genes in 29 mammals data set:\", amountPositiveSetInList))\n  print(head(relevantTFBSDf))\n  \n  #Count data TFBS for MHC gene set\n  countDataNames <-c(\"TFBS\",\"Counts\")\n  \n  positiveSetTFBSCounts <- count(relevantTFBSDf$TranscriptionFactorBindingSites)\n  names(positiveSetTFBSCounts) <- countDataNames\n  \n  #count the totals for the positive set\n  totalCountsMHCSet <- sum(positiveSetTFBSCounts$Counts)\n  \n  #Count data for TFBS in all genes\n  \n  totalSetTFBSCounts = count(tFTableMultipleLines$TranscriptionFactorBindingSites)\n  names(totalSetTFBSCounts) = countDataNames\n  \n  totalCountsFullSet = sum(totalSetTFBSCounts$Counts)\n  \n  #calculate the odds that a random gene in the full set has a certain TFBS\n  \n  genomeOdds <- apply(totalSetTFBSCounts, FUN = function(x) {\n    as.numeric(x[2])/totalCountsFullSet\n  }, MARGIN = 1)\n  names(genomeOdds) <- totalSetTFBSCounts$TFBS\n  \n  #calculate the odds that a gene in the MHC set has a certain TFBS\n  \n  MHCOdds <- apply(positiveSetTFBSCounts, FUN = function(x) {\n    as.numeric(x[2])/totalCountsMHCSet\n  }, MARGIN = 1)\n  names(MHCOdds) <- positiveSetTFBSCounts$TFBS\n  \n  \n  return(list(tFTableOneLine = tFTableOneLine,\n              tFTableMultipleLines = tFTableMultipleLines,\n              MHCGeneTable = MHCGeneTable,\n              MHCGenesInDataset = amountPositiveSetInList,\n              genomeOdds = genomeOdds,\n              MHCOdds = MHCOdds,\n              positiveSetTFBSCounts = positiveSetTFBSCounts,\n              totalSetTFBSCounts = totalSetTFBSCounts,\n              TFBSinMHCGenes = relevantTFBSDf\n              )\n        )\n  \n}\n\n\n\n##########################################################\n#computerFishersTest\n#function takes whole genome count data and positive set count data,\n#executes fisher's exact p on all relevant TFSB to find if they are enriched\n#in positive set\n##########################################################\n\ncomputeFishersTest = function(wholeGenomeTFBSCountData, positiveSetTFBSCountData, run = FALSE) {\n  \n  #don't compute again unless explicitly told to. Otherwise, just open the .rds\n  if(run == FALSE) {\n    \n    fisherDataFrame <- readRDS(file = paste(getwd(), \"/fisherDataFrame.rds\", sep = \"\"))\n    return(fisherDataFrame)\n    \n  }\n  else {\n  \n  #Get only those genes from the whole genome that have TFBS that are also found in the positive MHC set\n  relevantWholeGenome <- wholeGenomeTFBSCountData[wholeGenomeTFBSCountData$TFBS %in% positiveSetTFBSCountData$TFBS,] \n  totalCountsWholeGenome <- sum(wholeGenomeTFBSCountData$Counts)\n  totalCountsMHCGenes <- sum(positiveSetTFBSCountData$Counts)\n  \n  #listMatrices is for debug purposes, to check whether correct contingency tables are created\n  listMatrices <- list()\n  fisherDataFrame <- data.frame(TFBS = character(),\n                                pValue=numeric(),\n                                sampleEstimate=numeric(),\n                                lowerConfidenceInterval=numeric(),\n                                upperConfidenceInterval=numeric())\n  \n  #cycle over all the rows of \n  for(bindingSites in 1:nrow(positiveSetTFBSCountData)) {\n    \n    fisherMatrix <- matrix(c(positiveSetTFBSCountData$Counts[bindingSites],\n                             totalCountsMHCGenes - positiveSetTFBSCountData$Counts[bindingSites],\n                             relevantWholeGenome$Counts[bindingSites],\n                             totalCountsWholeGenome - relevantWholeGenome$Counts[bindingSites]),\n                           nrow = 2,\n                           dimnames = list(TFBS = c(relevantWholeGenome$TFBS[bindingSites], \"TotalTFBS\"),\n                                           Set = c(\"Positive set\", \"Whole genome\")))\n    fisherTestResult <- fisher.test(fisherMatrix)\n    pValue = fisherTestResult[\"p.value\"]\n    lowerConfInt <- unlist(fisherTestResult[\"conf.int\"])[1]\n    upperConfInt <- unlist(fisherTestResult[\"conf.int\"])[2]\n    sampleEst <- fisherTestResult[\"estimate\"]\n    \n    listMatrices <- append(listMatrices,fisherMatrix)\n    addVector <- c(as.character(relevantWholeGenome$TFBS[bindingSites]),\n                   pValue,\n                   sampleEst,\n                   lowerConfInt,\n                   upperConfInt)\n    names(addVector) <- c(\"TFBS\", \"pValue\", \"sampleEstimate\",\n                          \"lowerConfidenceInterval\", \"upperConfidenceInterval\")\n    #add to the Df the results of the fisherTest\n    fisherDataFrame <- rbind(fisherDataFrame, addVector, make.row.names = FALSE)\n    \n  }\n  #adjust for multiple testing with Benjamini-Hochberg methodology (utilises FDR)\n  fisherDataFrame$qValue <- p.adjust(fisherDataFrame$pValue, method=\"BH\")\n  saveRDS(fisherDataFrame, file = paste(getwd(), \"/fisherDataFrame.rds\", sep = \"\"))\n  return(fisherDataFrame)\n  }\n  \n  \n}\n\n##########################################################\n#function scoresOverRows\n#takes the dataframe with Fisher tests and sample estimates as well as whole genome data (one line).\n#returns dataframe with score per TFBS and total score of all genes in the 29 mammals data.\n##########################################################\nscoresOverRows <- function(wholeGenomeDataOneLine, fisherTests) {\n  \n  # find TFBS that are significantly overrepresented in positive set genes\n  #assign them a score. log(sample Estimate/qValue). Log to scale,\n  #sample estimate to incorporate effect size (i.e. HOW overrepresented are they in MHC genes?)\n  #qValue to incorporate probability ( TFBS with p>0.05<0.10 are less sure to be correct than those with p< 0.001)\n  \n  informativeTFBS <- fisherTests[fisherTests$qValue <= 0.10,]\n  informativeTFBS[order(informativeTFBS$qValue),]\n  rownames(informativeTFBS) = seq(1:nrow(informativeTFBS))\n  informativeTFBS$score <- log(informativeTFBS$sampleEstimate / informativeTFBS$qValue)\n  \n  \n  \n  scoreCompendium <- vector()\n  dataFrameResults <- data.frame()\n  #cycle over rows. Could be refined with an apply function\n  for(rows in 1:nrow(wholeGenomeDataOneLine)) {\n    \n    #check whether any of the informative TFBS are present in a gene's promoter region\n    currentRow <- wholeGenomeDataOneLine[rows,]\n    currentRowTFs <- currentRow[2]\n    characterVectorTFs <- unlist(strsplit(as.character(currentRowTFs), split = \"|\", fixed = TRUE))\n    logicalPresence <- informativeTFBS$TFBS %in% characterVectorTFs\n    currentRowEnsemblId <- currentRow[\"EnsemblId\"]\n    \n    for(bindingSites in 1:length(logicalPresence)) {\n      #for all informative TFBS, if they are present, add their score, otherwise, add 0\n      if(logicalPresence[bindingSites] == TRUE) {\n        \n        valueToAdd <- informativeTFBS$score[bindingSites]\n        \n        \n      } else if (logicalPresence[bindingSites] == FALSE) {\n        \n        valueToAdd <- 0\n        \n      }\n      \n      scoreCompendium <- append(scoreCompendium,valueToAdd)\n      names(scoreCompendium)[bindingSites] <-  informativeTFBS$TFBS[bindingSites]\n      \n    }\n    #set rownames as the EnsemblId of the gene from the whole genome\n    dataFrameResults <- rbind(dataFrameResults, scoreCompendium)\n    rownames(dataFrameResults) <- c(head(rownames(dataFrameResults),-1),currentRow[\"EnsemblId\"])\n    scoreCompendium <- vector()\n    #print(nrow(dataFrameResults))\n    \n  }\n  colnames(dataFrameResults) <- paste(\"Score for TFBS\", informativeTFBS$TFBS)\n  dataFrameResults$totalScore <- rowSums(dataFrameResults)\n  dataFrameResults <- dataFrameResults[order(dataFrameResults$totalScore, decreasing = TRUE),]\n  print(\"These are the informative TFBS:\")\n  print(informativeTFBS$TFBS)\n  return(list(\n    scoresWholeGenome = dataFrameResults,\n    informativeTFBS = informativeTFBS))\n}\n\n\n##########################################################\n#actual execution of the programme\n#loads positive set, checks which TFBS are present there and how often\n#does the same for whole genome data (WGD)\n#determines which TFBS overrepresented in MHC via fisher tests\n#assigns each gene a score log(sample odds ratio estimate from Fisher's exact p/corrected p-value Fisher's exact p) for every TFBS present\n#concatenates these individual scores into a total gene score and saves that to a file.\n##########################################################\ndataStructureTFBS <- loadLibraryAndData(TRUE)\nstr(dataStructureTFBS)\ndataStructureTFBS$tFTableOneLine\nfisherTests <- computeFishersTest(dataStructureTFBS$totalSetTFBSCounts,dataStructureTFBS$positiveSetTFBSCounts, run = TRUE)\nstr(fisherTests)\ninformativeTFBS <- subset(fisherTests, qValue <= 0.10)\ninformativeTFBS\n\n#switch for execution of the selection of all genes in the WGD that have the TFBS sig. overrepresented in positive set genes\n#set to TRUE when the positive set has changed and/or the analysis should be run again.\n\nrunselection = TRUE\n\nif (runselection == TRUE) {\nfinalScoresWholeGenome <- scoresOverRows(dataStructureTFBS$tFTableOneLine,fisherTests)\nsaveRDS(finalScoresWholeGenome, file = paste(getwd(), \"/FinalScoreWholeGenome.rds\",sep=\"\"))\n}\nif (runselection == FALSE) {\nfinalScoresWholeGenome <- readRDS(file = paste(getwd(), \"/FinalScoreWholeGenome.rds\", sep=\"\"))\n}\nstr(finalScoresWholeGenome)\nhead(finalScoresWholeGenome$scoresWholeGenome)\n\n#Save the final scores of each gene with respect to the amount of MHC-associated TFBS it has\nsaveRDS(finalScoresWholeGenome, file = paste(getwd(), \"/FinalScoreWholeGenome.rds\",sep=\"\"))\n\n###################################################################################################\n#Two functions follow below. One takes the frequency data in the whole genome and positive set and \n#creates a ggplot-compatible data frame. The other makes the actual plot.\n###################################################################################################\n\n#step 1: create a ggplot compatible data frame:\ncreateGraphData <- function(TFBSdata = dataStructureTFBS, run = TRUE ) {\n  \n  infTFBS <- finalScoresWholeGenome$informativeTFBS$TFBS\n  plotList = list()\n  resultsDf <- data.frame(TF = character(), yesno = character(), genomeMHC = character(), proportion = numeric(), qValue = numeric(), tag = character())\n  for (significantTFBS in 1: length(infTFBS))\n  {\n  proportionInMHC <- sum(TFBSdata$TFBSinMHCGenes$TranscriptionFactorBindingSites %in% infTFBS[significantTFBS])/TFBSdata$MHCGenesInDataset\n  proportionNotInMHC <- (TFBSdata$MHCGenesInDataset - sum(TFBSdata$TFBSinMHCGenes$TranscriptionFactorBindingSites %in% infTFBS[significantTFBS]))/TFBSdata$MHCGenesInDataset\n  proportionInWGD <- sum(TFBSdata$tFTableMultipleLines$TranscriptionFactorBindingSites %in% infTFBS[significantTFBS])/nrow(TFBSdata$tFTableOneLine)\n  proportionNotInWGD <- (nrow(TFBSdata$tFTableOneLine)-sum(TFBSdata$tFTableMultipleLines$TranscriptionFactorBindingSites %in% infTFBS[significantTFBS]))/nrow(TFBSdata$tFTableOneLine)\n  tempDf = data.frame(TF = rep(infTFBS[significantTFBS],4),\n                      yesno = c(\"yes\", \"no\", \"yes\", \"no\"),\n                      genomeMHC = c(\"MHC\", \"MHC\", \"genome\", \"genome\"),\n                      proportion = c(proportionInMHC, proportionNotInMHC, proportionInWGD, proportionNotInWGD),\n                      qValue = rep(finalScoresWholeGenome$informativeTFBS[finalScoresWholeGenome$informativeTFBS == infTFBS[significantTFBS],]$qValue,4))\n  #adds in three marks for significance for drawing\n  if (unique(tempDf$qValue) < 0.01) {\n    tempDf = data.frame(tempDf, data.frame(tag = rep(\"***\",4)))\n  } else if (unique(tempDf$qValue) < 0.05){\n    tempDf = data.frame(tempDf, data.frame(tag = rep(\"**\",4)))\n  } else {\n    tempDf = data.frame(tempDf, data.frame(tag = rep(\"*\",4)))\n  }\n  resultsDf = rbind(resultsDf, tempDf)\n    \n  }\n  return(resultsDf)\n}\nyesNoPlotData <- createGraphData()\n#step 2:\n#Now plot this data.\nplotGraphData <- function(plottingData, run = TRUE) {\n\n  if(run == TRUE) {  \ninitialPlot <-ggplot(data = plottingData, aes(x= factor(yesno, levels = c(\"yes\",\"no\")), y = proportion, fill = genomeMHC)) + \n  facet_wrap(~TF, scales = \"free\") +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  theme_minimal() +\n  xlab (\"TFBS present\") +\n  scale_fill_manual(breaks = c(\"genome\",\"MHC\"), values = c(\"gray25\",\"gray50\")) \n#Add significance values, lines, and asterisks indicating sig. qvalues (*** <0.01, ** <0.05, * < 0.1)\nannotatedPlot <- initialPlot + geom_text( aes(x= 1, y = 0.9, label = paste(\"qValue =\\n\",round(qValue,5))), size = 2.5) +\n  geom_text(aes(x= 1, y = 0.77, label = tag)) + ylim(0,1) +\n  geom_segment(aes(x = 0.75, y = 0.75, xend = 1.25, yend = 0.75)) \nannotatedPlot\nggsave(plot = annotatedPlot, filename = \"TFBSOverrepresentationPlot.pdf\", device = \"pdf\", dpi = 600)\n}\n\n}\n\nplotGraphData(yesNoPlotData, run = TRUE)\n\n#Create a .csv that outputs, per TFBS, the genes from the positive set that have this TFBS and their characteristics\n  #wat ik wil: weten welke positive genes een bepaalde TFBS hebben\n  #methode: pak de EnsemblIds van deze positive genes\n  #pak de relevante rijen uit de transcriptionfactorTablemultiplelines\n  #split ze --> TFs per gen\n  #kijk in welk van deze positive genes nu een bepaalde TFBS zit.\n  #doe dit alleen als ik iets veranderd heb, laat voor de rest dat bestand ongemoeid. Dus manueel op run = TRUE zetten.\noutputMHCGeneTFBS <- function(run = FALSE) {\n  \nif (run == TRUE) {\nTakegenes <- transcriptionFactorTableMultipleLines[transcriptionFactorTableMultipleLines$EnsemblId %in% positiveMHCGenes$EnsemblId,]\nTakegenes\n\n#now, for every relevant transcription factor, return the genes that have it\ngenelist = list()\nfor(relevantTFBS in 1:length(finalScoresWholeGenome$informativeTFBS$TFBS)) {\n  \n  positiveGenesWithTFBS = Takegenes[finalScoresWholeGenome$informativeTFBS$TFBS[relevantTFBS] == as.vector(Takegenes$transcriptionFactorBindingSites),]\n  print(positiveGenesWithTFBS)\n  EnsemblIds = positiveGenesWithTFBS$EnsemblId\n  genelist[[relevantTFBS]] <- positiveMHCGenes[positiveMHCGenes$EnsemblId  %in%  EnsemblIds,]\n  names(genelist)[relevantTFBS] <- finalScoresWholeGenome$informativeTFBS$TFBS[relevantTFBS]\n  genelist[[relevantTFBS]] <- cbind(TFBS = rep(finalScoresWholeGenome$informativeTFBS$TFBS[relevantTFBS],length(genelist[[relevantTFBS]]$MHC1OR2)),\n                                    genelist[[relevantTFBS]] )\n  if (relevantTFBS == 1) {\n    \n    write.csv(genelist[[relevantTFBS]], \"PositiveGenesWithTFBS.csv\")\n    \n  }\n  \n  else if (relevantTFBS > 1) {\n    \n    write.table(genelist[[relevantTFBS]], \"PositiveGenesWithTFBS.csv\", append = TRUE, sep = \",\", col.names = FALSE)\n    \n  }\n}\n}\n\n}\n#manual switch for running this, set to true if the positive set changes in some form.\noutputMHCGeneTFBS(run = FALSE)\n\n###################################################################\n#Output every gene in the WGD that has a sig. TFBS to a .csv file\n#method:\n  #Take all the EnsemblIds from the whole genome data that have an informative transcription factor\n  #Output them as a csv with the TFBS as header and the EnsemblIDs below\n  #Function below, run is a switch determining whether to run it\n###################################################################\noutputEnsIdsWithTFBS <- function(run = FALSE) {\n  \n  if(run == TRUE) {\n    listIds <- list()\n    for(relevantTFBS in 1:length(finalScoresWholeGenome$informativeTFBS$TFBS)) {\n      currentTFBS <- finalScoresWholeGenome$informativeTFBS$TFBS[relevantTFBS]\n      WGD_relevantgenes <-  dataStructureTFBS$tFTableMultipleLines[dataStructureTFBS$tFTableMultipleLines$TranscriptionFactorBindingSites %in%  currentTFBS,]\n      \n      #get the EnsemblIds for the current transcription factor from the data\n      #count the amount that have it per TFBS\n      Ids <- WGD_relevantgenes$EnsemblId\n      listIds[[currentTFBS]] <- Ids\n      lengthIds <- length(Ids)\n      names(lengthIds) <- currentTFBS\n      listIds[[\"amount\"]] <- append(listIds[[\"amount\"]], lengthIds)\n      \n    }\n    \n    #now construct a dataframe with this knowledge\n    \n    neededLength <- max(listIds$amount)\n    \n    #loop through the transcription factors, get their EnsIDs, and add \"\" as necessary for dataframe construction\n    for(relevantTFBS in 1:length(finalScoresWholeGenome$informativeTFBS$TFBS)) {\n      currentTFBS <- finalScoresWholeGenome$informativeTFBS$TFBS[relevantTFBS]\n      \n      #repeat \"\" required amount of times (i.e. the needed length minus the length it has)\n      #append that to the EnsemblID list\n      reqReps <-  neededLength - listIds$amount[currentTFBS]\n      listIds[[currentTFBS]] <- c(listIds[[currentTFBS]], rep(\"\", reqReps)) \n      \n      if (exists(\"dfWGDEnsmblIdsPerTFBS\")) {\n        \n        dfWGDEnsmblIdsPerTFBS <- data.frame(dfWGDEnsmblIdsPerTFBS,listIds[[currentTFBS]])\n        \n      } else if(!exists(\"dfWGDEnsmblIdsPerTFBS\")) {\n        \n        dfWGDEnsmblIdsPerTFBS <- data.frame(listIds[[currentTFBS]])\n        \n      }\n    }\n    \n    colnames(dfWGDEnsmblIdsPerTFBS) <- names(listIds$amount)\n    #Once that is done, put all the columns into a dataframe, and save that as .csv\n    write.csv(dfWGDEnsmblIdsPerTFBS, \"EnsemblIdsWGD.csv\")\n    \n    #return the df for checking in R\n    return (dfWGDEnsmblIdsPerTFBS)\n  }\n  \n}\n\noutputEnsIdsDataFrame <- outputEnsIdsWithTFBS(run = TRUE)\n\n###################################################\n#                       END                       #\n###################################################\n\n",
    "created" : 1493203615657.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "21|58|128|0|\n139|96|198|0|\n205|65|263|0|\n287|27|290|0|\n291|28|293|0|\n366|44|397|0|\n",
    "hash" : "174755398",
    "id" : "E9C66B46",
    "lastKnownWriteTime" : 1493386587,
    "last_content_update" : 1493388537875,
    "path" : "~/Documents/Project/Programming/Transcription Factor Binding/finalScriptDataAnalysisTFBS.R",
    "project_path" : "finalScriptDataAnalysisTFBS.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}